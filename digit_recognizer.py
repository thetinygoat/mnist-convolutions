# -*- coding: utf-8 -*-
"""digit-recognizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MJhLSmCkt1r6bVIOK6RhTw9J8XPbyuUY
"""

import numpy as np
import tensorflow as tf
import csv

def read_data(input_file):
    imgs = []
    lbls = []
    with open(input_file,'r') as f:
        reader = csv.reader(f)
        first_iter = True
        for row in reader:
            if(first_iter):
                first_iter = False
                continue
            label = row[0]
            data = row[1:]
            img = np.array(data).reshape(28,28)
            imgs.append(img)
            lbls.append(label)

    images = np.array(imgs).astype(float)
    labels = np.array(lbls).astype(float)
    return images,labels

def read_test_data(input_file):
    imgs = []
    with open(input_file,'r') as f:
        reader = csv.reader(f)
        first_iter = True
        for row in reader:
            if(first_iter):
                first_iter = False
                continue
            img = np.array(row).reshape(28,28)
            imgs.append(img)

    images = np.array(imgs).astype(float)
    return images

x,y=read_data('./train.csv')
x_test = read_test_data('./test.csv')

x = np.expand_dims(x,axis=3)
x_test = np.expand_dims(x_test,axis=3)

class train_callback(tf.keras.callbacks.Callback):
    def on_epoch_end(self,epoch,logs={}):
        if(logs.get('accuracy') > 0.99):
            self.model.stop_training = True
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32,(3,3), activation="relu", input_shape=(28,28,1)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation="relu"),
    tf.keras.layers.Dense(10, activation="softmax")
])

model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=['accuracy'])

callbacks = train_callback()
model.fit(x,y, epochs=10,callbacks=[callbacks],verbose=2)

predictions = model.predict(x_test)

import pandas as pd
arr = []
for i, pred in enumerate(predictions):
  nr = []
  nr.append(i)
  nr.append(np.argmax(pred))
  arr.append(np.array(nr))

arr = np.array(arr)
arr[0]

import csv
with open('./pred.csv', 'w+') as f:
  writer = csv.DictWriter(f, fieldnames=['ImageId', 'Label'])
  writer.writeheader()
  for i in arr:
    writer.writerow({'ImageId':i[0], 'Label':i[1]})

